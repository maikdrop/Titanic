MVP stands for Model-View-Presenter. The Graphic below shows the theoretical concept of MVP. In comparison to the common MVC (Model-View-Controller) pattern, MVP offers an additional entity, the presenter. Furthermore, view and view controller form together the view entity. There are two different versions of MVP: Supervising Controller and Passive View. In Titanic, the Passive View was implemented, so all data synchronization between view and model is organized by the presenter. The view should only implement view logic. There is no direct data binding between view and model or view and presenter. The view sends intents via public API to the presenter, it calls the public API of the model and communicates back to the view via delegate methods. The presenter is like a portal for the view to see and get relevant view-formatted model data to update their UI. Itâ€™s to be mentioned that only the game scene uses the MVP pattern. All other Scenes use MVC. A big benefit of MVP is to avoid a massive view controller (see next paragraph) and create a reusable view.
